Modified from https://github.com/gilbertw1/alacritty/commit/5e21a25d113750e76f5c6d4e3a9cf6e4eab93e6d

From 5e21a25d113750e76f5c6d4e3a9cf6e4eab93e6d Mon Sep 17 00:00:00 2001
From: Bryan Gilbert <gilbertw1@gmail.com>
Date: Fri, 20 Oct 2017 07:09:16 -0400
Subject: [PATCH] Add support for selecting text using shift-click

---
 Cargo.toml   |  2 +-
 src/event.rs | 11 +++++++----
 src/input.rs | 18 +++++++++---------
 3 files changed, 17 insertions(+), 14 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 04c02385..932c41bf 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -33,7 +33,7 @@ clap = "2"
 fnv = "1"
 unicode-width = "0.1.4"
 arraydeque = "0.2"
-glutin = "0.9.2"
+glutin = { git = "https://github.com/gilbertw1/glutin" }
 clippy = { version = "*", optional = true }
 env_logger = "0.4"
 
diff --git a/src/event.rs b/src/event.rs
index dda18652..768e282c 100644
--- a/src/event.rs
+++ b/src/event.rs
@@ -296,19 +296,19 @@ impl<N: Notify> Processor<N> {
                     ReceivedCharacter(c) => {
                         processor.received_char(c);
                     },
-                    MouseInput { state, button, .. } => {
+                    MouseInput { state, button, modifiers, .. } => {
                         *hide_cursor = false;
-                        processor.mouse_input(state, button);
+                        processor.mouse_input(state, button, modifiers.shift);
                         processor.ctx.terminal.dirty = true;
                     },
-                    MouseMoved { position: (x, y), .. } => {
+                    MouseMoved { position: (x, y), modifiers, .. } => {
                         let x = x as i32;
                         let y = y as i32;
                         let x = limit(x, 0, processor.ctx.size_info.width as i32);
                         let y = limit(y, 0, processor.ctx.size_info.height as i32);
 
                         *hide_cursor = false;
-                        processor.mouse_moved(x as u32, y as u32);
+                        processor.mouse_moved(x as u32, y as u32, modifiers.shift);
 
                         if !processor.ctx.selection.is_none() {
                             processor.ctx.terminal.dirty = true;
@@ -336,6 +336,9 @@ impl<N: Notify> Processor<N> {
             Event::Awakened => {
                 processor.ctx.terminal.dirty = true;
             }
+            _ => {
+              
+            }
         }
     }
 
diff --git a/src/input.rs b/src/input.rs
index 7378e8dc..d20cd63f 100644
--- a/src/input.rs
+++ b/src/input.rs
@@ -244,7 +244,7 @@ impl From<&'static str> for Action {
 
 impl<'a, A: ActionContext + 'a> Processor<'a, A> {
     #[inline]
-    pub fn mouse_moved(&mut self, x: u32, y: u32) {
+    pub fn mouse_moved(&mut self, x: u32, y: u32, shift: bool) {
         self.ctx.mouse_mut().x = x;
         self.ctx.mouse_mut().y = y;
 
@@ -265,7 +265,7 @@ impl<'a, A: ActionContext + 'a> Processor<'a, A> {
 
             if self.ctx.mouse_mut().left_button_state == ElementState::Pressed {
                 let report_mode = mode::MOUSE_REPORT_CLICK | mode::MOUSE_MOTION;
-                if !self.ctx.terminal_mode().intersects(report_mode) {
+                if !self.ctx.terminal_mode().intersects(report_mode) || shift {
                     self.ctx.update_selection(point, cell_side);
                 } else if self.ctx.terminal_mode().contains(mode::MOUSE_MOTION)
                         // Only report motion when changing cells
@@ -328,7 +328,7 @@ impl<'a, A: ActionContext + 'a> Processor<'a, A> {
         }
     }
 
-    pub fn on_mouse_press(&mut self) {
+    pub fn on_mouse_press(&mut self, shift: bool) {
         let now = Instant::now();
         let elapsed = self.ctx.mouse_mut().last_click_timestamp.elapsed();
         self.ctx.mouse_mut().last_click_timestamp = now;
@@ -344,7 +344,7 @@ impl<'a, A: ActionContext + 'a> Processor<'a, A> {
             },
             _ => {
                 let report_modes = mode::MOUSE_REPORT_CLICK | mode::MOUSE_MOTION;
-                if self.ctx.terminal_mode().intersects(report_modes) {
+                if self.ctx.terminal_mode().intersects(report_modes) && !shift {
                     self.mouse_report(0);
                     return;
                 }
@@ -355,8 +355,8 @@ impl<'a, A: ActionContext + 'a> Processor<'a, A> {
         };
     }
 
-    pub fn on_mouse_release(&mut self) {
-        if self.ctx.terminal_mode().intersects(mode::MOUSE_REPORT_CLICK | mode::MOUSE_MOTION) {
+    pub fn on_mouse_release(&mut self, shift: bool) {
+        if self.ctx.terminal_mode().intersects(mode::MOUSE_REPORT_CLICK | mode::MOUSE_MOTION) & !shift {
             self.mouse_report(3);
             return;
         }
@@ -426,16 +426,16 @@ impl<'a, A: ActionContext + 'a> Processor<'a, A> {
         }
     }
 
-    pub fn mouse_input(&mut self, state: ElementState, button: MouseButton) {
+    pub fn mouse_input(&mut self, state: ElementState, button: MouseButton, shift: bool) {
         if let MouseButton::Left = button {
             let state = mem::replace(&mut self.ctx.mouse_mut().left_button_state, state);
             if self.ctx.mouse_mut().left_button_state != state {
                 match self.ctx.mouse_mut().left_button_state {
                     ElementState::Pressed => {
-                        self.on_mouse_press();
+                        self.on_mouse_press(shift);
                     },
                     ElementState::Released => {
-                        self.on_mouse_release();
+                        self.on_mouse_release(shift);
                     }
                 }
             }
